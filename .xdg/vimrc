if &cp | set nocp | endif
let s:cpo_save=&cpo

""" Function keys INDEX """"""""""""""""""""""
"<F1> :call ToggleFocusMode()<CR>
"<F2> Hide Numbers and NERDTree
"<F3> :GrepBuffer<CR>
"<F5> Refresh File
"<F6> :call ToggleFocusColor()<CR>
"<F7> :NERDTreeToggle<CR>
"<F8> :CtrlPBuffer<CR>
"<F11> :call ToggleContrast()<CR>
""""""""""""""""""""""""""""""""""""""""""""""""

set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

" 256 Colors
set t_Co=256

call pathogen#infect()
call pathogen#helptags()

syntax on
colorscheme zenburn
filetype plugin indent on

let &cpo=s:cpo_save
unlet s:cpo_save

"set title "Show filename in titlebar of window
set cpo&vim
set background=dark

"BS past autoindents, line boundaries, and even the start of insertion
set backspace=indent,eol,start
set cmdheight=2
set fileencodings=ucs-bom,utf-8,default,latin1
set helplang=en
set history=500
set hlsearch
set incsearch
set ruler
set shiftwidth=4
set showcmd
set tabstop=4
set termencoding=utf-8
set encoding=utf-8
set updatetime=500
set wildmenu
set number
set smartindent
set cursorline
set scrolloff=5
set gdefault
set nobackup
set directory=.
set noswapfile
set foldlevel=99

set nocompatible
set autoindent
set showmatch
set ignorecase
set smartcase

set expandtab
set shiftround
set mouse=a

highlight LineNr ctermfg=Grey

" 80 chars
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" Change vertical bars char
set fillchars+=vert:â–ˆ

" Python Mode
set nofoldenable

" Save buffer automatically when changing files
set autowrite

" Handle Mac and DOS line-endings but prefer Unix endings
set fileformats=unix,mac,dos

" NERDTree
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" Airline
set laststatus=2
set ttimeoutlen=1

let g:airline_theme='powerlineish'
let g:airline_powerline_fonts = 1

let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tagbar#enabled = 1

" Grep
set grepprg=/bin/grep
let Grep_OpenQuickfixWindow = 1
let Grep_Default_Options = '-riIn'
let Grep_Skip_Dirs = '.git'
let Grep_Skip_Files = 'tags *.pyc'
let Grep_Default_Filelist = '*'

" Skeletons
au bufnewfile *.pl 0r $XDG_CONFIG_HOME/vim/skeletons/template.pl
au bufnewfile *.pm 0r $XDG_CONFIG_HOME/vim/skeletons/template.pm

" Set correct syntax to .tt2 files
au BufNewFile,BufRead *.tt2 set filetype=tt2html

" Set correct syntax to .md files
au BufNewFile,BufRead *.md set filetype=markdown

" Filter html
"nmap <C-p> :%!perl -p -i -e 'BEGIN { use HTML::Entities; use Encode; } $_=Encode::decode_utf8($_) unless Encode::is_utf8($_); $_=Encode::encode("ascii", $_, sub{HTML::Entities::encode_entities(chr shift)});'<CR>

" Easy navigation with splits
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" CtrlP
nnoremap <C-t> :CtrlP<CR>

" Silver Searcher (Ag)
nnoremap <leader>a :Ag

let g:EasyMotion_leader_key = '<leader>'

"Create a window and shows prove
nnoremap <silent> _pr :!prove<cr>:cope<cr><cr>

" Easier Split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" For dragging visual blocks
runtime plugin/dragvisuals.vim

" Remove any introduced trailing whitespace after moving...
let g:DVB_TrimWS = 1

vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()


"==============[ F-KEYS ]==================================

" Toggle Focus Mode
nmap <silent> <F1> :call ToggleFocusMode()<CR>

" Change to 'old_style'
nmap <silent> <F2> :set invnumber<CR>:NERDTreeClose<CR>

"Shows GrepBuffer
nnoremap <silent> <F3> :GrepBuffer<CR>

"Refresh current file
nmap <silent> <F5> :e %<CR>

" Change to focus colorscheme
nmap <silent> <F6> :call ToggleFocusColor()<CR>

"Activate NERDTREE
nmap <silent> <F7> :NERDTreeToggle<CR>
let NERDTreeDirArrows = 1

" Search buffer
let g:ctrlp_map = '<F8>'
let g:ctrlp_cmd = 'CtrlP'

" Activate contrast
function ToggleContrast()
    if exists("g:zenburn_high_Contrast")
        unlet g:zenburn_high_Contrast
    else
      let g:zenburn_high_Contrast = 1
    endif

    colorscheme zenburn
endfunction

nmap <silent> <F11> :call ToggleContrast()<CR>

"=============[ Filetype stuff ]================================

autocmd FileType perl   nn <silent> _F :g/^\s*sub<CR>
autocmd FileType python nn <silent> _F :g/^\s*def\ <CR>
autocmd FileType php    nn <silent> _F :g/^\s*function<CR>

"==============[ Perl Specific ]=================================

autocmd FileType perl setlocal keywordprg=perldoc\ -T\ -f
autocmd FileType perl set autoindent|set smartindent

" Check perl code with :make
autocmd FileType perl set makeprg=perl\ -c\ %\ $*
autocmd FileType perl set errorformat=%f:%l:%m

"==============[ Python Specific ]=================================

let g:python_highlight_all = 1
let g:python_highlight_space_errors = 1

" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

"==============[ Markdown Specific ]=================================

au BufRead,BufNewFile *.mkd,*.markdown,*.mdwn   set filetype=mkd

"==================================================================

" Use tab and shift tab to indent region
nmap <tab> v>
nmap <s-tab> v<
vmap <tab> >gv
vmap <s-tab> <gv

" Fold everything
xmap za set foldmethod=indent

"But not magic outdenting of comments...
inoremap # X<C-H>#

" Make BS/DEL work as expected
vmap <BS> x

" Insert ticks around word
map tt ysiw'
map TT ebi{'<ESC>ea'}<ESC>

" Little change to make it return to same line
nnoremap <silent> _t ml:%!perltidy -q<cr><ESC>'l
vnoremap <silent> _t :!perltidy -q<cr>

"clean up xml
nnoremap <silent> _x :%!tidy -quiet -indent -xml -utf8 -w 120<cr>
vnoremap <silent> _x :!tidy -quiet -indent -xml -utf8 -w 120<cr>

" set copiler to perlcritic; make for current file; open error window
nnoremap <silent> _pc :compiler perlcritic<cr>:make<cr>:cope<cr><cr>

"==============[ Shortcuts ]=================================

" PYTHON

iab pdb import pdb; pdb.set_trace()
iab pudb import pudb; pu.db

" PERL

iab logthis $c->log->debug(Dumper stuff);<ESC>?stuff<CR>cw
iab ttdump <ESC>o[% USE Dumper %]<CR><pre>[% Dumper.dump_html(detail) %]</pre><ESC>?detail<CR>cw


" some common typos
command! Qa qa
command! Q  q
command! W  w
command! Wq wq
command! WQ wq
command! Tabnew tabnew
command! Vs vs
command! Set set
command! E e


"====[ After Damian Presentation ]====

" Snipet for adding persistent_undo:
if has('persistent_undo')
    set undofile
    set undodir=$XDG_CONFIG_HOME/vim/undo_files/
endif

" Use smartcompletion plugin
runtime plugin/smartcom.vim

" Make naughty characters visible...
" (uBB is right double angle, uB7 is middle dot)
exec "set lcs=tab:\uBB\uBB,trail:\uB7,nbsp:~"

augroup VisibleNaughtiness
    autocmd!
    autocmd BufEnter  *       set list
    autocmd BufEnter  *.txt   set nolist
    autocmd BufEnter  *.vp*   set nolist
    autocmd BufEnter  *       if !&modifiable
    autocmd BufEnter  *           set nolist
    autocmd BufEnter  *       endif
augroup END

"====[ END Damian Presentation ]====

" Execute files
autocmd FileType perl   nmap W :Shell perl %<CR>
autocmd FileType python nmap W :Shell python %<CR>
autocmd FileType php    nmap W :Shell php %<CR>
autocmd FileType html   nmap W :!firefox %<CR>

" Locate Module
autocmd FileType perl   map L :cexpr system("locate_mod.pl " . shellescape(expand('<cWORD>')))<cr>:cope<cr><cr>

""" FocusMode
" From: http://paulrouget.com/e/vimdarkroom/
" And:  http://laktek.com/2012/09/05/distraction-free-writing-with-vim/
function! ToggleFocusMode()
  if (&foldcolumn != 12)
    set background=light
    highlight LineNr term=bold cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
    set laststatus=0
    set nonumber

    set laststatus=0
    set numberwidth=10
    set foldcolumn=12
    set noruler
    hi FoldColumn ctermbg=none
    hi LineNr ctermfg=DarkGrey ctermbg=none
    hi NonText ctermfg=0
    set nocursorline
  else
    set cursorline
    set laststatus=2
    set numberwidth=4
    set foldcolumn=0
    set ruler
    set number
  endif
endfunc

" Execute comands and print results in vim
map C :cexpr system(getline("."))<cr>:cope<cr><cr>

" From https://opensource.conformal.com/wiki/vim
function! s:ExecuteInShell(command, bang)
    let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))

    if (_ != '')
        let s:_ = _
        let bufnr = bufnr('%')
        let winnr = bufwinnr('^' . _ . '$')
        silent! execute  winnr < 0 ? 'new ' . fnameescape(_) : winnr . 'wincmd w'
        setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap
        silent! :%d
        let message = 'Execute ' . _ . '...'
        call append(0, message)
        echo message
        silent! 2d | resize 1 | redraw
        silent! execute 'silent! %!'. _
        silent! execute 'resize ' . line('$')
        silent! execute 'autocmd BufUnload <buffer> execute bufwinnr(' . bufnr . ') . ''wincmd w'''
        silent! execute 'autocmd BufEnter <buffer> execute ''resize '' .  line(''$'')'
        silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
        silent! execute 'nnoremap <silent> <buffer> <LocalLeader>g :execute bufwinnr(' . bufnr . ') . ''wincmd w''<CR>'
    endif
endfunction

command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
cabbrev shell Shell

let g:focuscolour = 0

function! ToggleFocusColor()
  if (g:focuscolour)
    colorscheme zenburn
    let g:focuscolour = 0
  else
    colorscheme focus-dark
    let g:focuscolour = 1
  endif
endfunc

map <ESC>[8~    <End>
map <ESC>[7~    <Home>
