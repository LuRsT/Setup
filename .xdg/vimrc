if &cp | set nocp | endif
let s:cpo_save=&cpo

""" Function keys INDEX """"""""""""""""""""""
"<F5> Refresh File
"<F7> :NERDTreeToggle<CR>
"<F8> :CtrlPBuffer<CR>
"<F9> :TagbarToggle<CR>
"<F11> :call ToggleContrast()<CR>
""""""""""""""""""""""""""""""""""""""""""""""""

set t_Co=256 " 256 Colors
syntax on

set runtimepath=$XDG_CONFIG_HOME/vim,$VIM,$VIMRUNTIME

""" BEGIN Vundle """
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$XDG_CONFIG_HOME/vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'L9'
Plugin 'tpope/vim-fugitive'
Plugin 'klen/python-mode'
Plugin 'scrooloose/syntastic'
Plugin 'majutsushi/tagbar'
Plugin 'gabesoft/vim-ags'
Plugin 'bling/vim-airline'
Plugin 'akiomik/git-gutter-vim'
Plugin 'kien/ctrlp.vim'
Plugin 'taglist.vim'
Plugin 'plasticboy/vim-markdown'
Plugin 'scrooloose/nerdtree'
Plugin 'chase/vim-ansible-yaml'
Plugin 'alfredodeza/pytest.vim'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'tpope/vim-dispatch'

call vundle#end()            " required

""" END Vundle """

filetype plugin indent on

let &cpo=s:cpo_save
unlet s:cpo_save

set cpo&vim
set background=dark

colorscheme zenburn

"BS past autoindents, line boundaries, and even the start of insertion
set backspace=indent,eol,start
set cmdheight=2
set fileencodings=ucs-bom,utf-8,default,latin1
set helplang=en
set history=500
set hlsearch
set incsearch
set ruler
set shiftwidth=4
set showcmd
set tabstop=4
set termencoding=utf-8
set encoding=utf-8
set updatetime=500
set wildmenu
set number
set smartindent
set cursorline
set scrolloff=5
set gdefault
set nobackup
set directory=.
set noswapfile
set foldlevel=99
set foldmethod=indent

set nocompatible
set autoindent
set showmatch
set ignorecase
set smartcase

set expandtab
set shiftround
set mouse=a
set clipboard=unnamedplus

highlight LineNr ctermfg=Grey

" Change vertical bars char
"set fillchars+=vert:â–ˆ

" Python Mode
let g:pymode_folding = 0
let g:pymode_lint = 1
let g:pymode_lint_ignore = "W391,E501"
let g:pymode_options_colorcolumn = 0

" Disable rope
let g:pymode_rope = 0

" Save buffer automatically when changing files
set autowrite

" Handle Mac and DOS line-endings but prefer Unix endings
set fileformats=unix,mac,dos

" NERDTree
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" Airline
set laststatus=2
set ttimeoutlen=1

let g:airline_theme='dark'
let g:airline_powerline_fonts = 1

let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tagbar#enabled = 1

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8']

" Skeletons
au bufnewfile *.pl 0r $XDG_CONFIG_HOME/vim/skeletons/template.pl
au bufnewfile *.pm 0r $XDG_CONFIG_HOME/vim/skeletons/template.pm
au bufnewfile *.pm 0r $XDG_CONFIG_HOME/vim/skeletons/template.html

" Set correct syntax to files
au BufNewFile,BufRead *.j2 set filetype=html
au BufNewFile,BufRead *.md set filetype=markdown

" SHORTCUTS
map S :Gstatus<CR>

" Open/Close folds with space button
nnoremap <space> za
vnoremap <space> zf

" CtrlP
nnoremap <C-p> :CtrlP<CR>

" Silver Searcher
nnoremap <leader>a :Ags

" Easier Split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Display filename in statusbar
nnoremap <C-x> :set statusline=%f<CR>

"==============[ F-KEYS ]==================================

"Refresh current file
nmap <silent> <F5> :e %<CR>

"Activate NERDTREE
nmap <silent> <F7> :NERDTreeToggle<CR>
let NERDTreeDirArrows = 1

" Search buffer
let g:ctrlp_map = '<F8>'
let g:ctrlp_cmd = 'CtrlP'

" Tagbar toggle
nnoremap <silent> <F9> :TagbarToggle<CR>

"==================================================================

" Use tab and shift tab to indent region
nmap <tab> v>
nmap <s-tab> v<
vmap <tab> >gv
vmap <s-tab> <gv

" MACROS

" Python

iab pdb import pdb; pdb.set_trace()
iab pudb import pudb; pu.db

" some common typos
command! QA qa
command! Qa qa
command! Q  q
command! W  w
command! Wq wq
command! WQ wq
command! Vs vs


if has('persistent_undo')
    set undofile
    set undodir=$XDG_CONFIG_HOME/vim/undo_files/
endif

" Make naughty characters visible...
" (uBB is right double angle, uB7 is middle dot)
exec "set lcs=tab:\uBB\uBB,trail:\uB7,nbsp:~"

augroup VisibleNaughtiness
    autocmd!
    autocmd BufEnter  *       set list
    autocmd BufEnter  *.txt   set nolist
    autocmd BufEnter  *.vp*   set nolist
    autocmd BufEnter  *       if !&modifiable
    autocmd BufEnter  *           set nolist
    autocmd BufEnter  *       endif
augroup END

" From https://opensource.conformal.com/wiki/vim
function! s:ExecuteInShell(command, bang)
    let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))

    if (_ != '')
        let s:_ = _
        let bufnr = bufnr('%')
        let winnr = bufwinnr('^' . _ . '$')
        silent! execute  winnr < 0 ? 'new ' . fnameescape(_) : winnr . 'wincmd w'
        setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap
        silent! :%d
        let message = 'Execute ' . _ . '...'
        call append(0, message)
        echo message
        silent! 2d | resize 1 | redraw
        silent! execute 'silent! %!'. _
        silent! execute 'resize ' . line('$')
        silent! execute 'autocmd BufUnload <buffer> execute bufwinnr(' . bufnr . ') . ''wincmd w'''
        silent! execute 'autocmd BufEnter <buffer> execute ''resize '' .  line(''$'')'
        silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
        silent! execute 'nnoremap <silent> <buffer> <LocalLeader>g :execute bufwinnr(' . bufnr . ') . ''wincmd w''<CR>'
    endif
endfunction

command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
cabbrev shell Shell

map <ESC>[8~    <End>
map <ESC>[7~    <Home>

" Highlight word under cursor
autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))

" Delete trailing whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e


set grepprg=fzz\ ag\ --nogroup\ --nocolor\ \{\{\$*}\}
