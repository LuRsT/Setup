if &cp | set nocp | endif
let s:cpo_save=&cpo

""" Function keys INDEX """"""""""""""""""""""
"<F1> :call ToggleFocusMode()<CR>
"<F3> :GrepBuffer<CR>
"<F2> Hide Numbers and NERDTree
"<F4> Paste
"<F5> Refresh File
"<F7> :NERDTreeToggle<CR>
"<F8> :CtrlPBuffer<CR>
"<F9> Flake8 Check<CR>
"<F11> :call ToggleContrast()<CR>
"
""""""""""""""""""""""""""""""""""""""""""""""""

set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME

" 256 Colors
set t_Co=256

call pathogen#infect()

syntax on
colorscheme zenburn
filetype plugin indent on

let &cpo=s:cpo_save
unlet s:cpo_save

set runtimepath^=~/.vim/bundle/ctrlp.vim

"set title "Show filename in titlebar of window
set cpo&vim
set background=dark
"BS past autoindents, line boundaries, and even the start of insertion
set backspace=indent,eol,start
set cmdheight=2
set fileencodings=ucs-bom,utf-8,default,latin1
set helplang=en
set history=500
set hlsearch
set incsearch
set ruler
set shiftwidth=4
set showcmd
set tabstop=4
set termencoding=utf-8
set encoding=utf-8
set updatetime=500
set wildmenu
set number
set smartindent
set cursorline
set scrolloff=5
set gdefault
set nobackup
set directory=.
set noswapfile

set nocompatible
set autoindent
set showmatch
set ignorecase
set smartcase

set expandtab
set shiftround

highlight LineNr ctermfg=Grey

" Save buffer automatically when changing files
set autowrite

" Handle Mac and DOS line-endings but prefer Unix endings
set fileformats=unix,mac,dos

" NERDTree
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" Powerline
set laststatus=2
let g:Powerline_symbols='fancy'

" Grep
set grepprg=/bin/grep
let Grep_OpenQuickfixWindow = 1

" Skeletons
au bufnewfile *.pl 0r ~/.vim/skeletons/template.pl
au bufnewfile *.pm 0r ~/.vim/skeletons/template.pm
au bufnewfile *.t 0r ~/.vim/skeletons/template.t

"Nice Statusline ( No need since I know use vim-powerline
"set statusline=%F%m%r%h%w\ (%{&ff}){%Y}[%l,%v][%p%%]\ %{fugitive#statusline()}
"set laststatus=2

" Set correct syntax to tt2 files
au BufNewFile,BufRead *.tt2 set ft=tt2html

" Map Leader
" Leader is mapped already to \
"let mapleader = ","

" Map Control+arrow keys to useful stuff
nmap <C-Up>    <PageUp>
nmap <C-Down>  <PageDown>
nmap <C-Left>  gT
nmap <C-Right> gt

" Filter html
nmap <C-p> :%!perl -p -i -e 'BEGIN { use HTML::Entities; use Encode; } $_=Encode::decode_utf8($_) unless Encode::is_utf8($_); $_=Encode::encode("ascii", $_, sub{HTML::Entities::encode_entities(chr shift)});'<CR>

" Map tabs better
nmap <C-l> gt

" Easy navigation with splits
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Ack
nnoremap <leader>a :Ack

"Create a window and shows prove
nnoremap <silent> _pr :!prove<cr>:cope<cr><cr>


"==============[ F-KEYS ]==================================

" F1 is new ESC
map <F1> <Esc>
imap <F1> <Esc>

nmap <silent> <F1> :call ToggleFocusMode()<CR>

" Change to 'old_style'
nmap <silent> <F2> :set invnumber<CR>:NERDTreeClose<CR>

"Shows GrepBuffer
nnoremap <silent> <F3> :GrepBuffer<CR>

" To toggle paste
set pastetoggle=<F4>

"Refresh current file
nmap <silent> <F5> :e %<CR>

"Activate NERDTREE
nmap <silent> <F7> :NERDTreeToggle<CR>

" Search buffer
let g:ctrlp_map = '<F8>'
let g:ctrlp_cmd = 'CtrlPBuffer'

" Flake8 check
autocmd FileType python map <buffer> <F9> :call Flake8()<CR>

" Activate contrast
function ToggleContrast()
    if exists("g:zenburn_high_Contrast")
        unlet g:zenburn_high_Contrast
    else
      let g:zenburn_high_Contrast = 1
    endif

    colorscheme zenburn
endfunction

nmap <silent> <F11> :call ToggleContrast()<CR>


"=============[ Filetype stuff ]================================

autocmd FileType perl   nn <silent> _F :g/^\s*sub<CR>
autocmd FileType python nn <silent> _F :g/^\s*def<CR>

"==============[ Perl Specific ]=================================

autocmd FileType perl setlocal keywordprg=perldoc\ -T\ -f
autocmd FileType perl set autoindent|set smartindent

" Check perl code with :make
autocmd FileType perl set makeprg=perl\ -c\ %\ $*
autocmd FileType perl set errorformat=%f:%l:%m

" Use tab and shift tab to indent region
nmap <tab> v>
nmap <s-tab> v<
vmap <tab> >gv
vmap <s-tab> <gv

" Fold everything
xmap za set foldmethod=indent

"But not magic outdenting of comments...
inoremap # X<C-H>#

" Make BS/DEL work as expected
vmap <BS> x

" Insert ticks around word ... must NOT be on last char of word
"map tt ebi'<ESC>ea'<ESC>
map tt ysiw'
map TT ebi{'<ESC>ea'}<ESC>

" Little change to make it return to same line
nnoremap <silent> _t ml:%!perltidy -q<cr><ESC>'l
vnoremap <silent> _t :!perltidy -q<cr>

"clean up xml
nnoremap <silent> _x :%!tidy -quiet -indent -xml -utf8 -w 120<cr>
vnoremap <silent> _x :!tidy -quiet -indent -xml -utf8 -w 120<cr>

" set copiler to perlcritic; make for current file; open error window
nnoremap <silent> _pc :compiler perlcritic<cr>:make<cr>:cope<cr><cr>

"==============[ Shortcuts ]=================================

" Insert common Perl code structures...
" warn does not buffer
iab subo sub {<CR>my $s = shift;<CR>my %a = @_;<CR><CR>return;<CR>}<ESC>5kwi
iab dprint print STDERR sprintf("%s %s: %s\n", '<C-R>%','gil', "" );<ESC>?""<CR>a
iab dprintd print STDERR sprintf("%s %s: %s\n", '<C-R>%','gil',Dumper() );<ESC>?()<CR>a

iab cprint $c->log->debug( '<C-R>%' . Dumper() );<ESC>?()<CR>a

" template toolkit
iab ttdump <ESC>o[% USE Dumper %]<CR><pre>[% Dumper.dump_html(detail) %]</pre><ESC>?detail<CR>cw

" search for use strict;
" Include logger package
" create a logger global object, jump back to where we were
iab mklogj <ESC>/use strict<CR>jjouse Sonaecom::Logger;<CR>my $l = Sonaecom::Logger::get_logger();<CR><ESC>:sleep 2<ESC>''
map mklogj <ESC>/use strict<CR>jjouse Sonaecom::Logger;<CR>my $l = Sonaecom::Logger::get_logger();<CR><ESC>:sleep 2<ESC>''

iab mklog <ESC>ouse Sonaecom::Logger;<CR>my $l = Sonaecom::Logger::get_logger();<ESC>
map mklog <ESC>ouse Sonaecom::Logger;<CR>my $l = Sonaecom::Logger::get_logger();<ESC>

" Log stuff
iab logthis $c->log->debug(Dumper stuff);<ESC>?stuff<CR>cw

" pressing < or > will let you indent/unident selected lines
vnoremap < <g<ESC>
vnoremap > >g<ESC>

" some common typos
command! Qa qa
command! Q  q
command! W  w
command! Wq wq
command! WQ wq

"====[ After Damian Presentation ]====

" Snipet for adding persistent_undo:
if has ('persistent_undo')
    set undodir=$HOME/tmp/.vim/undo_files
    set undolevels=5000
    set undofile
endif

" Use smartcompletion plugin
runtime plugin/smartcom.vim

" Make naughty characters visible...
" (uBB is right double angle, uB7 is middle dot)
exec "set lcs=tab:\uBB\uBB,trail:\uB7,nbsp:~"

augroup VisibleNaughtiness
    autocmd!
    autocmd BufEnter  *       set list
    autocmd BufEnter  *.txt   set nolist
    autocmd BufEnter  *.vp*   set nolist
    autocmd BufEnter  *       if !&modifiable
    autocmd BufEnter  *           set nolist
    autocmd BufEnter  *       endif
augroup END


"====[ END Damian Presentation ]====

" Execute files
autocmd FileType perl   nmap W :!clear;echo;echo;perl %;echo;echo;echo<CR>
autocmd FileType python nmap W :!clear;echo;echo;python2 %;echo;echo;echo<CR>

" Locate Module
map L :cexpr system("locate_mod.pl " . shellescape(expand('<cWORD>')))<cr>:cope<cr><cr>

""" FocusMode
" From: http://paulrouget.com/e/vimdarkroom/
" And:  http://laktek.com/2012/09/05/distraction-free-writing-with-vim/
function! ToggleFocusMode()
  if (&foldcolumn != 12)
    set background=light
    highlight LineNr term=bold cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=NONE guibg=NONE
    set laststatus=0
    set nonumber

    set laststatus=0
    set numberwidth=10
    set foldcolumn=12
    set noruler
    hi FoldColumn ctermbg=none
    hi LineNr ctermfg=DarkGrey ctermbg=none
    hi NonText ctermfg=0
    set nocursorline
  else
    set cursorline
    set laststatus=2
    set numberwidth=4
    set foldcolumn=0
    set ruler
    set number
  endif
endfunc

" Execute comands and print results in vim
map รง :cexpr system(getline("."))<cr>:cope<cr><cr>

" Function that fixes some perl problems
fu! Fix(global)
    let hk_match = '\(\w\+\)\(\s*=>\)'
    if search( hk_match ) != 0
        execute a:global . "s/" . hk_match . "/'\\1'\\2/gc"
    endif

    let bw_match = '\(\%(\$\w\+\|->\){\)\s*\(\w\+\)\s*\}'
    if search( bw_match ) != 0
        execute a:global . "s/" . bw_match . "/\\1'\\2'}/gc"
    endif

    let fd_match = '\%(=cut\n\+\)\@<!\n\(sub\s\+\(\%(prepare_\)\?\(\w\+\)\)\)'
    if search( fd_match ) != 0
        execute a:global . 's/' . fd_match . '/\r=function \2 OPTIONS\r\rThis functions process the \3 step.\r\r=cut\r\r\1/gc'
    endif

    let sp_match = '\s\+$'
    if search( sp_match ) != 0
        execute a:global . 's/' . sp_match . '//gc'
    endif
endf

au FileType perl nn <silent> _f :call Fix("%")<Enter>
au FileType perl vn <silent> _f :call Fix("")<Enter>

" show KNF violations
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.*/
"let c_space_errors=1


" From https://opensource.conformal.com/wiki/vim
function! s:ExecuteInShell(command, bang)
    let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))

    if (_ != '')
        let s:_ = _
        let bufnr = bufnr('%')
        let winnr = bufwinnr('^' . _ . '$')
        silent! execute  winnr < 0 ? 'new ' . fnameescape(_) : winnr . 'wincmd w'
        setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap
        silent! :%d
        let message = 'Execute ' . _ . '...'
        call append(0, message)
        echo message
        silent! 2d | resize 1 | redraw
        silent! execute 'silent! %!'. _
        silent! execute 'resize ' . line('$')
        silent! execute 'autocmd BufUnload <buffer> execute bufwinnr(' . bufnr . ') . ''wincmd w'''
        silent! execute 'autocmd BufEnter <buffer> execute ''resize '' .  line(''$'')'
        silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . _ . ''', '''')<CR>'
        silent! execute 'nnoremap <silent> <buffer> <LocalLeader>g :execute bufwinnr(' . bufnr . ') . ''wincmd w''<CR>'
    endif
endfunction

command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
cabbrev shell Shell


