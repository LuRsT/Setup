* Old stuff

#+BEGIN_SRC emacs-lisp

;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 14))
;;
(setq doom-font (font-spec :family "Operator Mono Lig Book" :size 14))

;; (if (string-match-p (regexp-quote "Hasklig")
;;     (aref (query-font (face-attribute 'default :font)) 0))
;;         (setq haskell-font-lock-symbols nil)
;;         (setq haskell-font-lock-symbols 'unicode))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-gruvbox)


;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.


(evil-set-initial-state 'term-mode 'emacs)


;; if you use ivy you can also use M-n to fill the current input field with the symbol at point
;;
;; Fix a problem with doom update
;; rm -rf ~/.emacs.d/.local/straight/repos/org-roam/

;; While I'm learning emacs...
(after! which-key
  (setq which-key-idle-delay 0.5))

(map!
      :n "C-h"   #'evil-window-left
      :n "C-j"   #'evil-window-down
      :n "C-k"   #'evil-window-up
      :n "C-l"   #'evil-window-right

      :n "C-p"   #'projectile-find-file
      )
#+END_SRC

* Cool Shortcuts

SPC g g c a -> Git ammend
SPC f p     -> Edit config files
SPC g g p   -> Git Push
SPC s i     -> imenu
SPC ,       -> Buffers
SPC .       -> All files (even those not on git)
SPC h t     -> Themes selection
SPC *       -> Search under cursor
r e master  -> git rebase master

* Configuration

Using a literate config was inspired by: https://tecosaur.github.io/emacs-config/config.html source: https://github.com/tecosaur/emacs-config/blob/master/config.org

** Basic configuration

#+BEGIN_SRC emacs-lisp
(setq-default
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      inhibit-compacting-font-caches t            ; When there are lots of glyphs, keep them in memory
      )

(display-time-mode 1)                             ; Enable time in the mode-line
(display-battery-mode 1)                          ; On laptops it's nice to know how much power you have
#+END_SRC

Remove the "Saving clipboard..." when closing emacs.

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard-manager nil)
#+END_SRC

** More config

Using `s` takes me to the place I want much quicker than other motions, I just need to train myself to use it more.

#+BEGIN_SRC emacs-lisp
(evil-snipe-mode -1)
(map! :nm "s" #'avy-goto-word-1
      :nm "S" #'avy-goto-char-timer)
#+END_SRC


A few shortcuts I have on my vimrc for a while, and I quickly realise how badly I need them every time I use vi or another vi-compatible editor.

#+BEGIN_SRC emacs-lisp
(after! evil-ex
  (evil-ex-define-cmd "W" #'evil-write)
  (evil-ex-define-cmd "Wq" #'evil-quit-all)
  (evil-ex-define-cmd "Vs" #'evil-window-vsplit)
  (evil-ex-define-cmd "Ss" #'evil-window-split)
  )
#+END_SRC

Enable bold and italics on every team. I'm unsure if I really need this tho

#+BEGIN_SRC emacs-lisp
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
#+END_SRC

Make comments italics on every theme

#+BEGIN_SRC emacs-lisp
(add-hook! 'doom-load-theme-hook (custom-set-faces! '(font-lock-comment-face :slant italic)))
#+END_SRC

I'm looking for a way to be able to search for tags in a project, this was one failed attempt at that...

#+BEGIN_SRC emacs-lisp
(map! :leader :prefix "c" (:prefix ("g" . "gtags")
                    :desc "Goto definition" "d" 'counsel-gtags-find-definition))
#+END_SRC

Space w w opens a selection for the window I want to go to. Probably useless, since I tend to do `SPC w hjkl` or `C-hjkl`.

#+BEGIN_SRC emacs-lisp
(map! :map evil-window-map
      "w" #'ace-window)
#+END_SRC


** Org-Journal

All the org stuff, because this is why I started using emacs

#+BEGIN_SRC emacs-lisp
(use-package org-journal
      :bind
      ("C-c n j" . org-journal-new-entry)
      :custom
      (org-journal-dir "~/vimwiki/org-roam/")
      (org-journal-date-prefix "#+TITLE: ")
      (org-journal-file-format "%Y-%m-%d.org")
      (org-journal-date-format "%A, %d %B %Y"))
    (setq org-journal-enable-agenda-integration t)
#+END_SRC

*** Org Roam stuff

Big inspiration from: https://www.ianjones.us/blog/2020-05-05-doom-emacs/

If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/vimwiki")

(use-package! org-roam
  :commands (org-roam-insert org-roam-find-file org-roam)
  :init
  (setq org-roam-directory "/home/lurst/vimwiki/org-roam/")
  (map! :leader
        :prefix "n"
        :desc "Org-Roam-Insert" "i" #'org-roam-insert
        :desc "Org-Roam-Find"   "/" #'org-roam-find-file
        :desc "Org-Roam-Buffer" "r" #'org-roam)
  :config
  (org-roam-mode +1))


(after! org-roam
        (map! :leader
            :prefix "n"
            :desc "org-roam" "l" #'org-roam
            :desc "org-roam-insert" "i" #'org-roam-insert
            :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
            :desc "org-roam-find-file" "f" #'org-roam-find-file
            :desc "org-roam-graph-show" "g" #'org-roam-graph-show
            :desc "org-roam-insert" "i" #'org-roam-insert
            :desc "org-roam-capture" "c" #'org-roam-capture))

(require 'company-org-roam)
    (use-package company-org-roam
      :when (featurep! :completion company)
      :after org-roam
      :config
      (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))

(setq deft-directory "~/vimwiki")


#+END_SRC

** Python stuff

Enable elpy which has lots of good stuff.

TODO Doesn't work :(

#+BEGIN_SRC emacs-lisp
;; (use-package elpy
;;   :ensure t
;;   :init
;;   (elpy-enable)
;;   )
#+END_SRC

** Searching

I use ivy, a cool shortcut I could use more is `C-Space` to view the file from the search buffer.

This config shows options by pressing `C-o` inside the search buffer.

#+BEGIN_SRC emacs-lisp
(setq ivy-read-action-function #'ivy-hydra-read-action)
#+END_SRC

** Windows

Select a new file when splitting.

#+BEGIN_SRC emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(setq +ivy-buffer-preview t)
#+END_SRC

Rotate layout with `SPC w SPC`

#+BEGIN_SRC emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout)
#+END_SRC

*** Company

Bettter autocomplete

#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
(add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.

(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+END_SRC

Spelling backends

#+BEGIN_SRC emacs-lisp
(set-company-backend! '(text-mode
                        markdown-mode
                        gfm-mode)
  '(:seperate company-ispell
              company-files
              company-yasnippet))
#+END_SRC

Lazy load spelling

#+BEGIN_SRC emacs-lisp
(after! flyspell (require 'flyspell-lazy) (flyspell-lazy-mode 1))
#+END_SRC


*** Better tables

#+BEGIN_SRC emacs-lisp
 (package! org-pretty-table-mode
  :recipe (:host github :repo "Fuco1/org-pretty-table") :pin "88380f865a...")
#+END_SRC
