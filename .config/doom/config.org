#+TITLE: Personal emacs config
#+STARTUP: overview

* How to do things

I'm using a literate config was inspired by: https://tecosaur.github.io/emacs-config/config.html source: https://github.com/tecosaur/emacs-config/blob/master/config.org


- SPC g g c a -> Git ammend
- SPC f p     -> Edit config files
- SPC g g p   -> Git Push
- SPC s i     -> imenu
- SPC ,       -> Buffers
- SPC .       -> All files (even those not on git)
- SPC h t     -> Themes selection
- SPC *       -> Search under cursor
- r e master  -> git rebase master
- SPC :       -> Same as M-x
- SPC m l l   -> Insert link to a file or anything else on an org-mode file
- SPC q r     -> Quits and restores emacs

- M-x buffer-menu to see "*messages*"

- M-x org-hide-block-all ->  Collapses all #+BEGIN_SRC blocks

To find out what a mapping is for a combo key, for example, M-x:

"spc h k" then hit "M x"

To edit a piece of code inside an org documnet:

`SPC m '`

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
they are implemented.

Modules code is located here: https://github.com/hlissner/doom-emacs/tree/develop/modules

Org-mode visibility: https://orgmode.org/manual/Initial-visibility.html

To change the splash image:
Set `fancy-splash-image`` to a path to an image

`M-p` on the Magit commit message buffer allows me to scroll through previous commit messages. Useful when the commit is aborted for some reason.

`SPC p i` Refresh project files (to remove files from cache in `SPC SPC`)

`Alt \` delete whitepsace under cursor

C-k and C-j to move between changes in Git timemachine

* Frontpage

Changing the default: https://github.com/hlissner/doom-emacs/blob/develop/modules/ui/doom-dashboard/config.el#L44-L88

#+BEGIN_SRC emacs-lisp
;; (delete "Open private configuration" +doom-dashboard-menu-title)
#+END_SRC

* Original config

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

Althought I don't use any of this yet...

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Gil Goncalves"
      user-mail-address "lursty@gmail.com")
#+END_SRC

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 14))

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Operator Mono Lig Book" :size 14))
(setq doom-variable-pitch-font (font-spec :family "Operator Mono Lig Book" :size 16))
#+END_SRC

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+BEGIN_SRC emacs-lisp
;;(doom-theme 'gruvbox-dark-hard)
#+END_SRC

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)

(dolist (mode '(org-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda() (display-line-numbers-mode 0))))
#+END_SRC

* Basic configuration

Just a few configs

#+BEGIN_SRC emacs-lisp
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode) ;; Disable smart parens

(add-hook 'before-save-hook
          'delete-trailing-whitespace)

(add-hook 'text-mode-hook 'visual-line-mode) ; Wrap lines

;; (pixel-scroll-mode t)

(setq-default
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      inhibit-compacting-font-caches t            ; When there are lots of glyphs, keep them in memory
      )
#+END_SRC

Remove the "Saving clipboard..." when closing emacs.

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard-manager nil)
#+END_SRC

Keep the time for which-key to open up short, because I need to read it 80% of the time.

#+BEGIN_SRC emacs-lisp
(after! which-key
  (setq which-key-idle-delay 0.5))
#+END_SRC

Turn the terminal into emacs mode because having modal is confusing and unlike the environment I had on tmux. THIS DOESN'T WORK

Using `s` takes me to the place I want much quicker than other motions, I just need to train myself to use it more.

#+BEGIN_SRC emacs-lisp
(evil-snipe-mode -1)
(map! :nm "s" #'avy-goto-word-1
      :nm "S" #'avy-goto-char-timer)
#+END_SRC

A few shortcuts I have on my vimrc for a while, and I quickly realise how badly I need them every time I use vi or another vi-compatible editor.

#+BEGIN_SRC emacs-lisp
(after! evil-ex
  (evil-ex-define-cmd "W" #'evil-write)
  (evil-ex-define-cmd "Q" #'evil-quit)
  (evil-ex-define-cmd "Wq" #'evil-quit)
  (evil-ex-define-cmd "Wqa" #'evil-quit-all)
  (evil-ex-define-cmd "WQa" #'evil-quit-all)
  (evil-ex-define-cmd "Vs" #'evil-window-vsplit)
  (evil-ex-define-cmd "Sp" #'evil-window-split)
  )
#+END_SRC

A function to make sure :Wq means to quit magit instead of emacs
#+BEGIN_SRC emacs-lisp
(defun my-evil-write ()
  (if (derived-mode-p 'magit-mode)
      (magit-specific-quit)
    (evil-quit-all)))
(evil-ex-define-cmd "Wqa" #'evil-quit-all)
#+END_SRC

Enable bold and italics on every team. I'm unsure if I really need this tho

#+BEGIN_SRC emacs-lisp
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
#+END_SRC

Make comments italics on every theme

#+BEGIN_SRC emacs-lisp
(add-hook! 'doom-load-theme-hook (custom-set-faces! '(font-lock-comment-face :slant italic)))
#+END_SRC

I'm looking for a way to be able to search for tags in a project, this was one failed attempt at that...

#+BEGIN_SRC emacs-lisp
(map! :leader :prefix "c" (:prefix ("g" . "gtags")
                    :desc "Goto definition" "d" 'counsel-gtags-find-definition))
#+END_SRC

* Org-mode
Change the color for links (from: https://kitchingroup.cheme.cmu.edu/blog/2016/11/04/New-link-features-in-org-9/)

If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/vimwiki")

;; Make the collapsed headers better and avoid the confusion with actual ellipsis
(setq org-ellipsis " â–¼ ")

;; Configure deft
(setq deft-directory "~/vimwiki")

;; (org-link-set-parameters "http" :face '(:foreground "orange"))
;; (org-link-set-parameters "https" :face '(:foreground "green"))
#+END_SRC

Define the location of the file to hold tasks

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/vimwiki/Tasks.org")
#+END_SRC

#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")

(after! org
  (setq org-capture-templates
        '(("t" "New entry" entry (file "Tasks.org")
           "* TODO %?")
          ("T" "Task" entry (file+headline "Tasks.org" "Misc")
           "* TODO %?")
          )))

(map! :leader
      :desc "Org Capture" "k" #'org-capture)
#+end_src

* Org-Journal

All the org stuff, because this is why I started using emacs

#+BEGIN_SRC emacs-lisp
(use-package org-journal
      :bind
      ("C-c n j" . org-journal-new-entry)
      :custom
      (org-journal-dir "~/vimwiki")
      (org-journal-date-prefix "#+TITLE: ")
      (org-journal-file-format "%Y-%m-%d.org")
      (org-journal-date-format "%A, %d %B %Y"))
    (setq org-journal-enable-agenda-integration t)
#+END_SRC

* Org Roam stuff

Big inspiration from: https://www.ianjones.us/blog/2020-05-05-doom-emacs/

#+BEGIN_SRC emacs-lisp
(setq org-roam-directory "~/vimwiki/org-roam")

(use-package! org-roam
  :commands (org-roam-insert org-roam-find-file org-roam)
  :init
  (setq org-roam-directory "/home/lurst/vimwiki/org-roam/")
  (map! :leader
        :prefix "n"
        :desc "Org-Roam-Insert" "i" #'org-roam-insert
        :desc "Org-Roam-Find"   "/" #'org-roam-find-file
        :desc "Org-Roam-Buffer" "r" #'org-roam)
  :config
  (org-roam-mode +1))


(after! org-roam
  (map! :leader
        :prefix "n"
        :desc "org-roam" "l" #'org-roam
        :desc "org-roam-insert" "i" #'org-roam-insert
        :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
        :desc "org-roam-find-file" "f" #'org-roam-find-file
        :desc "org-roam-graph-show" "g" #'org-roam-graph-show
        :desc "org-roam-insert" "i" #'org-roam-insert
        :desc "org-roam-capture" "c" #'org-roam-capture))

(require 'company-org-roam)
(use-package company-org-roam
  :when (featurep! :completion company)
  :after org-roam
  :config
  (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))

;; Make roam links different
(after! org-roam
  (set-face-attribute 'org-roam-link nil :foreground "#FF8860"))
#+END_SRC

#+RESULTS:

* Python stuff
https://github.com/hlissner/doom-emacs/tree/develop/modules/lang/python

I can check which python you're accessing inside emacs by doing M-x run-python and then import sys; print(sys.path)

** Pyls
I'm going to try to use pyls first, which requires me to ~pip install python-language-server[all]~. If that doesnt work, I can enable mspyls:
** mspyls
To use mspyls, install it with M-x lsp-install-server and add this to your private config.el:

#+BEGIN_SRC emacs-lisp
;; (after! lsp-python-ms
;;   (set-lsp-priority! 'mspyls 1))
#+END_SRC

** Set a column for python code

#+BEGIN_SRC emacs-lisp
(add-hook! python-mode
  (set-fill-column 120))
#+END_SRC

* Searching

I use ivy, a cool shortcut I could use more is `C-Space` to view the file from the search buffer.

This config shows options by pressing `C-o` inside the search buffer.

#+BEGIN_SRC emacs-lisp
(setq ivy-read-action-function #'ivy-hydra-read-action)
#+END_SRC

* Projectile

Set directory where projects are:

#+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/dev/"))
#+END_SRC

* Windows

Select a new file when splitting.

#+BEGIN_SRC emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (projectile/find-file))

(setq +ivy-buffer-preview t)
#+END_SRC

Rotate layout with `SPC w SPC`

#+BEGIN_SRC emacs-lisp
(map! :map evil-window-map
      "SPC" #'rotate-layout)
#+END_SRC

* Company

Bettter autocomplete

#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
(add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.

(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+END_SRC

Spelling backends

#+BEGIN_SRC emacs-lisp
(set-company-backend! '(text-mode markdown-mode gfm-mode)
  '(:seperate company-ispell
              company-files
              company-yasnippet))
#+END_SRC

* Better tables

#+BEGIN_SRC emacs-lisp
 (package! org-pretty-table-mode
  :recipe (:host github :repo "Fuco1/org-pretty-table") :pin "88380f865a...")
#+END_SRC

* Window shortcuts

if you use ivy you can also use M-n to fill the current input field with the symbol at point

Fix a problem with doom update
rm -rf ~/.emacs.d/.local/straight/repos/org-roam/

Shortcuts for moving from window to window just like in vim and tmux. Ctrl+hjkl

#+BEGIN_SRC emacs-lisp
(map!
 :n "C-h"   #'evil-window-left
 :n "C-j"   #'evil-window-down
 :n "C-k"   #'evil-window-up
 :n "C-l"   #'evil-window-right

 :n "C-p"   #'projectile-find-file
 :n "C-]"   #'evil-goto-definition
 )
#+END_SRC

* Writeroom

COnfiguration of my zen writting mode

#+BEGIN_SRC emacs-lisp
(setq writeroom-fullscreen-effect t)
#+END_SRC

* Deno
The instructions here on how to configure emacs to understand Deno: https://deno.land/manual/getting_started/setup_your_environment#emacs

Run this line on your project:

npm install --save-dev typescript-deno-plugin typescript in your project (

And add a `tsconfig.json` file on the root of the project [[https://howtodoinjava.com/typescript/tsconfig-json/][more info on tsconfig.json]]:
* Rust

Show me clippy

#+BEGIN_SRC emacs-lisp
(setq lsp-rust-analyzer-cargo-watch-command "clippy")
#+END_SRC

* Rest

#+BEGIN_SRC emacs-lisp
;; (set-popup-rule "^\\*HTTP Response"  :side 'right)
#+END_SRC

* Experiment with eval
BY Henrik

This makes the operator `gr` show the output on a little popup

#+BEGIN_SRC emacs-lisp
(after! org
(defun +org-eval-handler (beg end)
    "TODO"
    (save-excursion
    (if (not (cl-loop for pos in (list beg (point) end)
                        if (save-excursion (goto-char pos) (org-in-src-block-p t))
                        return (goto-char pos)))
        (message "Nothing to evaluate at point")
        (org-babel-where-is-src-block-head)
        (let ((beg (max beg (match-beginning 5)))
            (end (min end (match-end 5)))
            (major-mode
                (org-src-get-lang-mode (or (org-eldoc-get-src-lang)
                                        (user-error "No lang specified for this src block")))))
        (+eval/region beg end)))))
(set-eval-handler! 'org-mode #'+org-eval-handler))
#+END_SRC

This enables this function on org-mode

#+BEGIN_SRC emacs-lisp
(map! :after evil-org
      :map evil-org-mode-map
      :n "gr" nil)
#+END_SRC

Run elisp by selecting a line and pressing ENTER

#+BEGIN_SRC emacs-lisp
(after! elisp-mode
  (map! :map elisp-mode-map :v "RET" #'eros-eval-last-sexp))
#+END_SRC

* Jira

#+begin_src emacs-lisp
(defun tp-insert-jira-link ()
  "this function creates a jira link"
  (interactive)
  (let ((issue (read-string "issue: ")))
    (insert (concat "[[jira-server.org/project-" issue "][project-" issue "]]"))))
#+end_src

* Taking SVG screenshots

#+begin_src emacs-lisp
(defun screenshot-svg ()
  "Save a screenshot of the current frame as an SVG image.
Saves to a temp file and puts the filename in the kill ring."
  (interactive)
  (let* ((filename (make-temp-file "Emacs" nil ".svg"))
         (data (x-export-frames nil 'svg)))
    (with-temp-file filename
      (insert data))
    (kill-new filename)
    (message filename)))
#+end_src

* Vterm

#+BEGIN_SRC emacs-lisp
(global-set-key [f2] 'vterm-toggle)
#+END_SRC

Fix an issue with vterm where the cursor doesn't go back to the right place when going for normal mode.

#+BEGIN_SRC emacs-lisp
(defun evil-collection-vterm-escape-stay ()
  "Go back to normal state but don't move cursor backwards.
Moving cursor backwards is the default vim behavior but
it is not appropriate in some cases like terminals."
  (setq-local evil-move-cursor-back nil))

(add-hook 'vterm-mode-hook #'evil-collection-vterm-escape-stay)
#+END_SRC
